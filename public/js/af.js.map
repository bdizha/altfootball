{"version":3,"sources":["af.js"],"names":[],"mappingsfile":"af.js","sourcesContent":["$(function () {\n\n    var popupSize = {\n        width: 780,\n        height: 550\n    };\n\n    $('a._2Q0fU').on('click', function (e) {\n        var\n            verticalPos = Math.floor(($(window).width() - popupSize.width) / 2),\n            horisontalPos = Math.floor(($(window).height() - popupSize.height) / 2);\n\n        var popup = window.open($(this).prop('href'), 'social',\n            'width=' + popupSize.width + ',height=' + popupSize.height +\n            ',left=' + verticalPos + ',top=' + horisontalPos +\n            ',location=0,menubar=0,toolbar=0,status=0,scrollbars=1,resizable=1');\n\n        if (popup) {\n            popup.focus();\n            e.preventDefault();\n        }\n    });\n});\n\nfunction setHeightFor(selector) {\n    $(selector).attr(\"style\", \"\");\n    var $columns = $(selector);\n    var maxHeight = Math.max.apply(Math, $columns.map(function () {\n        return $(this).height();\n    }).get());\n\n    if ($(window).width() > 1125) {\n        $(selector).attr(\"style\", \"height: \" + (maxHeight + 40) + \"px\");\n    }\n}\n\nfunction adjustHeight(target, reference) {\n    if ($(this).width() > 1125 && $(target).height() < $(reference).height()) {\n        $(reference).attr(\"style\", \"height: \" + ($(target).height()) + \"px\");\n    }\n}\n\n$(window).bind('resize', function () {\n    applyHeights();\n});\n\nfunction applyHeights(){\n    adjustHeight('._1Q_Pu', '._3VSm9');\n}\n\n$(function() {\n\n    ko.validation.rules.pattern.message = 'Invalid.';\n\n    ko.validation.init({\n        insertMessages: true,\n        decorateElement: true,\n        errorMessageClass: \"_1u7op\",\n        errorClass: '',\n        errorsAsTitle: true,\n        parseInputAttributes: false,\n        messagesOnModified: true,\n        decorateElementOnModified: true,\n        decorateInputElement: true\n    }, true);\n\n    var CommentsViewModel = function(params) {\n        var self = this;\n        self.fileData = ko.observable({\n            dataURL: ko.observable()\n        });\n        self.type_id = ko.observable(params.type_id);\n        self.isList = ko.observable(params.is_list);\n        self.level = ko.observable(params.level);\n        self.comments = ko.observableArray(params.comments);\n        self.image = ko.observable('');\n        self.currentCommentId = ko.observable(0);\n        self.root = ko.observable(params.root);\n        self.newCommentText = ko.observable('');\n        self.commentsCount = ko.computed(function() {\n            applyHeights();\n            return self.comments().length;\n        });\n\n        self.canSubmitComment = ko.computed(function() {\n            return self.newCommentText().length > 0;\n        });\n\n        // callback\n        self.update = function(reply) {\n            var comments = ko.utils.arrayMap(self.comments(), function(comment) {\n                if(comment.id === reply.type_id){\n                    comment.comments.unshift(reply);\n                }\n\n                return comment;\n            });\n\n            self.comments([]);\n            self.comments(comments);\n\n            var allComments = $('._55ghi');\n            allComments.removeClass('_4c7v3');\n\n            applyHeights();\n        };\n\n        self.fileData().dataURL.subscribe(function(dataURL){\n            self.image(dataURL);\n        });\n\n        self.reply = function(comment){\n            console.log('#comment-' + comment.id + ' ._55ghi');\n\n            var allComments = $('._55ghi');\n            var activeComment = $('#comment-' + comment.id + ' ._55ghi');\n\n            if(activeComment.hasClass('_4c7v3')){\n                allComments.removeClass('_4c7v3');\n            }\n            else{\n                allComments.removeClass('_4c7v3');\n                activeComment.addClass('_4c7v3');\n            }\n        };\n\n        self.saveComment = function(){\n            var comment = {\n                type_id: self.type_id(),\n                content: self.newCommentText(),\n                image: self.image(),\n                comments: []\n            };\n\n            self.newCommentText('');\n\n            applyHeights();\n\n            $.ajax(\"/comment\", {\n                data: ko.toJSON(comment),\n                type: \"post\",\n                contentType: \"application/json\",\n                success: function(comment) {\n                    self.comments.unshift(ko.utils.parseJson(comment));\n                }\n            });\n        };\n    };\n\n    ko.components.register('comments', {\n        viewModel: CommentsViewModel,\n        template: { element: 'comments-template' }\n    });\n\n    var ReplyFormViewModel = function(params) {\n        var self = this;\n\n        self.fileData = ko.observable({\n            dataURL: ko.observable()\n        });\n\n        console.log(\"users...\");\n        console.log(currentUser);\n\n        self.image = ko.observable();\n        self.currentUser = ko.observable(window.currentUser);\n        self.comment = ko.observable(params.comment);\n        self.replyText = ko.observable('');\n        self.callback = params.callback;\n        self.canSubmitReply = ko.computed(function() {\n            return self.replyText().length > 0;\n        });\n\n        self.cancel = function(){\n            var allComments = $('._55ghi');\n            allComments.removeClass('_4c7v3');\n        };\n\n        self.fileData().dataURL.subscribe(function(dataURL){\n            self.image(dataURL);\n        });\n\n        self.saveReply = function(){\n            var reply = {\n                content: self.replyText(),\n                image: self.image(),\n                type: 'comment',\n                type_id: self.comment().id\n            };\n\n            self.replyText('');\n\n            $.ajax(\"/comment\", {\n                data: ko.toJSON(reply),\n                type: \"post\",\n                contentType: \"application/json\",\n                success: function(reply) {\n                    self.callback(ko.utils.parseJson(reply));\n                }\n            });\n\n        };\n    };\n\n    var FanFollowViewModel = function(params) {\n        var self = this;\n\n        self.fan = ko.observable(params.fan);\n\n        self.isActive = ko.observable(Boolean(params.fan.is_active));\n        self.isInactive = ko.observable(!Boolean(params.fan.is_active));\n\n        self.save = function() {\n            self.isActive(!self.isActive());\n            self.isInactive(!self.isInactive());\n\n            var fan = {\n                requester_id: self.fan().requester_id,\n                requested_id: self.fan().requested_id\n            };\n\n            $.ajax(\"/fan\", {\n                data: ko.toJSON(fan),\n                type: \"post\",\n                contentType: \"application/json\",\n                success: function(fan) {\n                }\n            });\n        };\n    };\n\n    var DribbleViewModel = function(params) {\n        var self = this;\n\n        self.dribblesCount = ko.observable(params.count);\n        self.initialOpacity = ko.observable(Boolean(params.has_dribble) ? 0 : 1);\n        self.selectedOpacity = ko.observable(Boolean(params.has_dribble) ? 1 : 0);\n        self.type = ko.observable(params.type);\n        self.typeId = ko.observable(params.type_id);\n\n        self.save = function() {\n\n            if(self.initialOpacity() === 1){\n                self.dribblesCount(self.dribblesCount() + 1);\n                self.initialOpacity(0);\n                self.selectedOpacity(1);\n            }\n            else{\n                self.dribblesCount(self.dribblesCount() - 1);\n                self.initialOpacity(1);\n                self.selectedOpacity(0);\n            }\n\n            var dribble = {\n                type_id: self.typeId(),\n                type: self.type()\n            };\n\n            $.ajax(\"/dribble\", {\n                data: ko.toJSON(dribble),\n                type: \"post\",\n                contentType: \"application/json\",\n                success: function(dribble) {\n                }\n            });\n        };\n    };\n\n    var PostsViewModel = function(params) {\n        var self = this;\n\n        self.posts = ko.observableArray([]);\n        self.page = ko.observable(params.page);\n\n        self.fetchPosts = function() {\n\n            console.log(\"loading\");\n            var params = {\n                page: self.page()\n            };\n\n            $.ajax(\"/posts\", {\n                data: params,\n                type: \"get\",\n                contentType: \"application/json\",\n                success: function(response) {\n                    console.log(\"New posts:\");\n\n                    var posts = ko.utils.parseJson(response);\n                    ko.utils.arrayForEach(posts, function(post) {\n                        self.posts.push(post);\n                    });\n\n                    self.page(self.page() + 2);\n                }\n            });\n        };\n    };\n\n    ko.components.register('posts', {\n        viewModel: PostsViewModel,\n        template: { element: 'posts-template' }\n    });\n\n    ko.components.register('follow', {\n        viewModel: FanFollowViewModel,\n        template: { element: 'follow-template' }\n    });\n\n    ko.components.register('dribbles', {\n        viewModel: DribbleViewModel,\n        template: { element: 'post-dribbles-template' }\n    });\n\n    ko.components.register('reply-form', {\n        viewModel: ReplyFormViewModel,\n        template: { element: 'reply-form-template' }\n    });\n});\n"]}