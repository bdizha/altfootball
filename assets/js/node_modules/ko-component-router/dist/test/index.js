import * as ko from 'knockout';
import { Router } from './router';
import { map, traversePath } from './utils';
import './binding';
export { Context } from './context';
export { Route } from './route';
export { Router } from './router';
export { isActivePath, resolveHref } from './utils';
ko.components.register('ko-component-router', {
    synchronous: true,
    viewModel: { createViewModel: createViewModel },
    template: "<div data-bind=\"if: component\">\n      <div class=\"ko-component-router-view\" data-bind=\"__ko_component_router__\"></div>\n    </div>"
});
ko.bindingHandlers.__ko_component_router__ = {
    init: function (el, valueAccessor, allBindings, viewModel, bindingCtx) {
        var $router = bindingCtx.$rawData;
        ko.applyBindingsToNode(el, {
            css: $router.component,
            component: {
                name: $router.component,
                params: $router.ctx
            }
        }, bindingCtx.extend({ $router: $router }));
        if ($router.isRoot) {
            $router.init();
        }
        else {
            $router.ctx.$parent.router.initialized.then(function () { return $router.init(); });
        }
        return { controlsDescendantBindings: true };
    }
};
function createViewModel(params) {
    var _this = this;
    var router = Router.head;
    if (!router) {
        router = new Router(Router.getPathFromLocation(), undefined, params);
    }
    else {
        while (router.bound) {
            router = router.ctx.$child.router;
        }
    }
    router.bound = true;
    if (router.isRoot) {
        router.ctx.runBeforeRender()
            .then(function () {
            if (router.ctx._redirect) {
                router.ctx.runAfterRender().then(function () {
                    var _a = traversePath(router, router.ctx._redirect), r = _a.router, p = _a.path;
                    r.update(p, router.ctx._redirectArgs);
                });
            }
            else {
                router.ctx.render();
                map(Router.onInit, function (resolve) { return resolve(_this); });
            }
        });
    }
    else if (router.ctx._redirect) {
        var _a = traversePath(router, router.ctx._redirect), r = _a.router, p = _a.path;
        r.update(p, router.ctx._redirectArgs);
    }
    return router;
}
//# sourceMappingURL=index.js.map