import { Router } from './router';
export { default as isArray } from 'lodash-es/isArray';
export { default as isBoolean } from 'lodash-es/isBoolean';
export { default as isFunction } from 'lodash-es/isFunction';
export { default as isPlainObject } from 'lodash-es/isPlainObject';
export { default as isString } from 'lodash-es/isString';
export { default as isUndefined } from 'lodash-es/isUndefined';
export { default as castArray } from 'lodash-es/castArray';
export { default as concat } from 'lodash-es/concat';
export { default as extend } from 'lodash-es/extend';
export { default as extendWith } from 'lodash-es/extendWith';
export { default as filter } from 'lodash-es/filter';
export { default as flatMap } from 'lodash-es/flatMap';
export { default as map } from 'lodash-es/map';
export { default as mapValues } from 'lodash-es/mapValues';
export { default as reduce } from 'lodash-es/reduce';
export declare type AsyncCallback = (done?: () => void) => Promise<any> | void;
export declare function sequence(callbacks: AsyncCallback[], ...args: any[]): Promise<{
    count: number;
    success: boolean;
}>;
export declare function traversePath(router: Router, path: any): {
    router: Router;
    path: any;
};
export declare function resolveHref({router, path}: {
    router: Router;
    path: string;
}): string;
export declare function isActivePath({router, path}: {
    router: Router;
    path: string;
}): boolean;
export declare function isGenerator(x: any): boolean;
export declare function isThenable(x: any): boolean;
export declare function promisify(_fn?: Function): (...args: any[]) => Promise<any>;
