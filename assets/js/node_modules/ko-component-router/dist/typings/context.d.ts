import 'core-js/es7/symbol';
import { Route } from './route';
import { Router } from './router';
export declare class Context {
    $child: Context;
    $parent: Context;
    _redirect: string;
    _redirectArgs: {
        push?: boolean;
        force?: boolean;
        with?: {
            [prop: string]: any;
        };
    };
    router: Router;
    route: Route;
    params: {
        [k: string]: any;
    };
    path: string;
    pathname: string;
    private _queue;
    private _beforeNavigateCallbacks;
    private _appMiddlewareDownstream;
    private _routeMiddlewareDownstream;
    constructor(router: Router, $parent: Context, path: string, _with?: {
        [key: string]: any;
    });
    addBeforeNavigateCallback(cb: any): void;
    readonly base: string;
    readonly canonicalPath: string;
    readonly $root: Context;
    readonly $parents: Array<Context>;
    readonly $children: Array<Context>;
    queue(promise: any): void;
    redirect(path: any, args?: {}): void;
    runBeforeNavigateCallbacks(): Promise<boolean>;
    private flushQueue();
    render(): void;
    runBeforeRender(flush?: boolean): Promise<void>;
    runAfterRender(): Promise<void>;
    runBeforeDispose(flush?: boolean): Promise<void>;
    runAfterDispose(flush?: boolean): Promise<void>;
    private static runMiddleware(middleware, ctx);
    private static generatorify(fn);
}
