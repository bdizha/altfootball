(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "knockout", "./router", "./utils", "./binding", "./context", "./route", "./router", "./utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ko = require("knockout");
    var router_1 = require("./router");
    var utils_1 = require("./utils");
    require("./binding");
    var context_1 = require("./context");
    exports.Context = context_1.Context;
    var route_1 = require("./route");
    exports.Route = route_1.Route;
    var router_2 = require("./router");
    exports.Router = router_2.Router;
    var utils_2 = require("./utils");
    exports.isActivePath = utils_2.isActivePath;
    exports.resolveHref = utils_2.resolveHref;
    ko.components.register('ko-component-router', {
        synchronous: true,
        viewModel: { createViewModel: createViewModel },
        template: "<div data-bind=\"if: component\">\n      <div class=\"ko-component-router-view\" data-bind=\"__ko_component_router__\"></div>\n    </div>"
    });
    ko.bindingHandlers.__ko_component_router__ = {
        init: function (el, valueAccessor, allBindings, viewModel, bindingCtx) {
            var $router = bindingCtx.$rawData;
            ko.applyBindingsToNode(el, {
                css: $router.component,
                component: {
                    name: $router.component,
                    params: $router.ctx
                }
            }, bindingCtx.extend({ $router: $router }));
            if ($router.isRoot) {
                $router.init();
            }
            else {
                $router.ctx.$parent.router.initialized.then(function () { return $router.init(); });
            }
            return { controlsDescendantBindings: true };
        }
    };
    function createViewModel(params) {
        var _this = this;
        var router = router_1.Router.head;
        if (!router) {
            router = new router_1.Router(router_1.Router.getPathFromLocation(), undefined, params);
        }
        else {
            while (router.bound) {
                router = router.ctx.$child.router;
            }
        }
        router.bound = true;
        if (router.isRoot) {
            router.ctx.runBeforeRender()
                .then(function () {
                if (router.ctx._redirect) {
                    router.ctx.runAfterRender().then(function () {
                        var _a = utils_1.traversePath(router, router.ctx._redirect), r = _a.router, p = _a.path;
                        r.update(p, router.ctx._redirectArgs);
                    });
                }
                else {
                    router.ctx.render();
                    utils_1.map(router_1.Router.onInit, function (resolve) { return resolve(_this); });
                }
            });
        }
        else if (router.ctx._redirect) {
            var _a = utils_1.traversePath(router, router.ctx._redirect), r = _a.router, p = _a.path;
            r.update(p, router.ctx._redirectArgs);
        }
        return router;
    }
});
//# sourceMappingURL=index.js.map