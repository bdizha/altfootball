(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "core-js/es7/symbol", "knockout", "./router", "./utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    require("core-js/es7/symbol");
    var ko = require("knockout");
    var router_1 = require("./router");
    var utils_1 = require("./utils");
    var Context = (function () {
        /* eslint-enable */
        function Context(router, $parent, path, _with) {
            if (_with === void 0) { _with = {}; }
            this._queue = [];
            this._beforeNavigateCallbacks = [];
            this._appMiddlewareDownstream = [];
            this._routeMiddlewareDownstream = [];
            var route = router.resolveRoute(path);
            var _a = tslib_1.__read(route.parse(path), 3), params = _a[0], pathname = _a[1], childPath = _a[2];
            utils_1.extend(this, {
                $parent: $parent,
                router: router,
                route: route,
                params: params,
                path: path,
                pathname: pathname
            }, _with);
            if ($parent) {
                $parent.$child = this;
            }
            if (childPath) {
                new router_1.Router(childPath, this).ctx;
            }
        }
        Context.prototype.addBeforeNavigateCallback = function (cb) {
            this._beforeNavigateCallbacks.unshift(cb);
        };
        Object.defineProperty(Context.prototype, "base", {
            get: function () {
                return this.router.isRoot
                    ? router_1.Router.base
                    : this.$parent.base + this.$parent.pathname;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Context.prototype, "canonicalPath", {
            // full path w/o base
            get: function () {
                return this.base.replace(new RegExp(this.$root.base, 'i'), '') + this.pathname;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Context.prototype, "$root", {
            get: function () {
                var ctx = this;
                while (ctx) {
                    if (ctx.$parent) {
                        ctx = ctx.$parent;
                    }
                    else {
                        return ctx;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Context.prototype, "$parents", {
            get: function () {
                var parents = [];
                var parent = this.$parent;
                while (parent) {
                    parents.push(parent);
                    parent = parent.$parent;
                }
                return parents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Context.prototype, "$children", {
            get: function () {
                var children = [];
                var child = this.$child;
                while (child) {
                    children.push(child);
                    child = child.$child;
                }
                return children;
            },
            enumerable: true,
            configurable: true
        });
        Context.prototype.queue = function (promise) {
            this._queue.push(promise);
        };
        Context.prototype.redirect = function (path, args) {
            if (args === void 0) { args = {}; }
            this._redirect = path;
            this._redirectArgs = utils_1.extend({}, args, { push: false });
        };
        Context.prototype.runBeforeNavigateCallbacks = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var ctx, callbacks, success;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ctx = this // eslint-disable-line
                            ;
                            callbacks = [];
                            while (ctx) {
                                callbacks = tslib_1.__spread(ctx._beforeNavigateCallbacks, callbacks);
                                ctx = ctx.$child;
                            }
                            return [4 /*yield*/, utils_1.sequence(callbacks)];
                        case 1:
                            success = (_a.sent()).success;
                            return [2 /*return*/, success];
                    }
                });
            });
        };
        Context.prototype.flushQueue = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                var thisQueue, childQueues;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            thisQueue = Promise.all(this._queue).then(function () {
                                _this._queue = [];
                            });
                            childQueues = utils_1.map(this.$children, function (c) { return c.flushQueue(); });
                            return [4 /*yield*/, Promise.all(tslib_1.__spread([thisQueue], childQueues))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Context.prototype.render = function () {
            var ctx = this; // eslint-disable-line
            while (ctx) {
                if (utils_1.isUndefined(ctx._redirect)) {
                    ctx.router.component(ctx.route.component);
                }
                ctx = ctx.$child;
            }
            ko.tasks.runEarly();
        };
        Context.prototype.runBeforeRender = function (flush) {
            if (flush === void 0) { flush = true; }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var appMiddlewareDownstream, routeMiddlewareDownstream, numAppMiddlewareRanPreRedirect, numRouteMiddlewareRanPreRedirect;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            appMiddlewareDownstream = Context.runMiddleware(router_1.Router.middleware, this);
                            routeMiddlewareDownstream = Context.runMiddleware(this.route.middleware, this);
                            return [4 /*yield*/, utils_1.sequence(appMiddlewareDownstream)];
                        case 1:
                            numAppMiddlewareRanPreRedirect = (_a.sent()).count;
                            return [4 /*yield*/, utils_1.sequence(routeMiddlewareDownstream)];
                        case 2:
                            numRouteMiddlewareRanPreRedirect = (_a.sent()).count;
                            this._appMiddlewareDownstream = appMiddlewareDownstream.slice(0, numAppMiddlewareRanPreRedirect);
                            this._routeMiddlewareDownstream = routeMiddlewareDownstream.slice(0, numRouteMiddlewareRanPreRedirect);
                            if (!(this.$child && utils_1.isUndefined(this._redirect))) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.$child.runBeforeRender(false)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            if (!flush) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.flushQueue()];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        Context.prototype.runAfterRender = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, utils_1.sequence(utils_1.concat(this._appMiddlewareDownstream, this._routeMiddlewareDownstream))];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.flushQueue()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Context.prototype.runBeforeDispose = function (flush) {
            if (flush === void 0) { flush = true; }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.$child && utils_1.isUndefined(this._redirect))) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.$child.runBeforeDispose(false)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, utils_1.sequence(utils_1.concat(this._routeMiddlewareDownstream, this._appMiddlewareDownstream))];
                        case 3:
                            _a.sent();
                            if (!flush) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.flushQueue()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        Context.prototype.runAfterDispose = function (flush) {
            if (flush === void 0) { flush = true; }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.$child && utils_1.isUndefined(this._redirect))) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.$child.runAfterDispose(false)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, utils_1.sequence(utils_1.concat(this._routeMiddlewareDownstream, this._appMiddlewareDownstream))];
                        case 3:
                            _a.sent();
                            if (!flush) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.flushQueue()];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        Context.runMiddleware = function (middleware, ctx) {
            var _this = this;
            return utils_1.map(middleware, function (fn) {
                var runner = Context.generatorify(fn)(ctx);
                var beforeRender = true;
                return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var ret;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                ret = runner.next() || {};
                                if (!utils_1.isThenable(ret)) return [3 /*break*/, 2];
                                return [4 /*yield*/, ret];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 2:
                                if (!utils_1.isThenable(ret.value)) return [3 /*break*/, 4];
                                return [4 /*yield*/, ret.value];
                            case 3:
                                _a.sent();
                                _a.label = 4;
                            case 4:
                                if (beforeRender) {
                                    // this should only block the sequence for the first call,
                                    // and allow cleanup after the redirect
                                    beforeRender = false;
                                    return [2 /*return*/, utils_1.isUndefined(ctx._redirect)];
                                }
                                else {
                                    return [2 /*return*/, true];
                                }
                                return [2 /*return*/];
                        }
                    });
                }); };
            });
        };
        Context.generatorify = function (fn) {
            return utils_1.isGenerator(fn)
                ? fn
                : function (ctx) {
                    return tslib_1.__asyncGenerator(this, arguments, function () {
                        var ret;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, tslib_1.__await(utils_1.promisify(fn)(ctx))];
                                case 1:
                                    ret = _a.sent();
                                    if (!utils_1.isPlainObject(ret)) return [3 /*break*/, 10];
                                    return [4 /*yield*/, tslib_1.__await(utils_1.promisify(ret.beforeRender)())];
                                case 2: return [4 /*yield*/, _a.sent()];
                                case 3:
                                    _a.sent();
                                    return [4 /*yield*/, tslib_1.__await(utils_1.promisify(ret.afterRender)())];
                                case 4: return [4 /*yield*/, _a.sent()];
                                case 5:
                                    _a.sent();
                                    return [4 /*yield*/, tslib_1.__await(utils_1.promisify(ret.beforeDispose)())];
                                case 6: return [4 /*yield*/, _a.sent()];
                                case 7:
                                    _a.sent();
                                    return [4 /*yield*/, tslib_1.__await(utils_1.promisify(ret.afterDispose)())];
                                case 8: return [4 /*yield*/, _a.sent()];
                                case 9:
                                    _a.sent();
                                    return [3 /*break*/, 12];
                                case 10: return [4 /*yield*/, ret];
                                case 11:
                                    _a.sent();
                                    _a.label = 12;
                                case 12: return [2 /*return*/];
                            }
                        });
                    });
                };
        };
        return Context;
    }());
    exports.Context = Context;
});
//# sourceMappingURL=context.js.map