(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "path-to-regexp", "./utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var path_to_regexp_1 = require("path-to-regexp");
    var utils_1 = require("./utils");
    var Route = (function () {
        /* eslint-enable */
        function Route(path, config) {
            var _a = tslib_1.__read(Route.parseConfig(config), 3), component = _a[0], middleware = _a[1], children = _a[2];
            this.path = path;
            this.component = component;
            this.middleware = middleware;
            this.children = children;
            var _b = tslib_1.__read(Route.parsePath(path, !utils_1.isUndefined(children)), 2), keys = _b[0], regexp = _b[1];
            this.keys = keys;
            this.regexp = regexp;
        }
        Route.prototype.matches = function (path) {
            var matches = this.regexp.exec(path);
            if (matches === null) {
                return false;
            }
            if (this.children) {
                try {
                    for (var _a = tslib_1.__values(this.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var childRoute = _b.value;
                        var childPath = '/' + (matches[matches.length - 1] || '');
                        if (childRoute.matches(childPath)) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return false;
            }
            return true;
            var e_1, _c;
        };
        Route.prototype.parse = function (path) {
            var childPath;
            var params = {};
            var matches = this.regexp.exec(path);
            for (var i = 1, len = matches.length; i < len; ++i) {
                var k = this.keys[i - 1];
                var v = matches[i] || '';
                if (k.name === '__child_path__') {
                    childPath = '/' + v;
                    path = path.replace(new RegExp(childPath + '$'), '');
                }
                else {
                    params[k.name] = v;
                }
            }
            return [params, path, childPath];
        };
        Route.parseConfig = function (config) {
            var component;
            var children;
            var middleware = utils_1.reduce(config, function (accum, m) {
                if (utils_1.isString(m)) {
                    m = m;
                    component = m;
                }
                else if (utils_1.isPlainObject(m)) {
                    m = m;
                    children = utils_1.map(m, function (routeConfig, path) { return new Route(path, routeConfig); });
                    if (!component) {
                        component = 'ko-component-router';
                    }
                }
                else if (utils_1.isFunction(m)) {
                    m = m;
                    accum.push(m);
                }
                return accum;
            }, []);
            return [component, middleware, children];
        };
        Route.parsePath = function (path, hasChildren) {
            if (hasChildren) {
                path = path.replace(/\/?!?$/, '/!');
            }
            if (path[path.length - 1] === '!') {
                path = path.replace('!', ':__child_path__(.*)?');
            }
            else {
                path = path.replace(/\(?\*\)?/, '(.*)');
            }
            var keys = [];
            var regexp = path_to_regexp_1.default(path, keys);
            return [keys, regexp];
        };
        return Route;
    }());
    exports.Route = Route;
});
//# sourceMappingURL=route.js.map